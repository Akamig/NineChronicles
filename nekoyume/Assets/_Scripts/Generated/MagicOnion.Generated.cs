// <auto-generated />
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace MagicOnion
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::MagicOnion;
    using global::MagicOnion.Client;

    public static partial class MagicOnionInitializer
    {
        static bool isRegistered = false;

        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.BeforeSceneLoad)]
        public static void Register()
        {
            if(isRegistered) return;
            isRegistered = true;

            MagicOnionClientRegistry<Nekoyume.Shared.Services.IBlockChainService>.Register((x, y, z) => new Nekoyume.Shared.Services.BlockChainServiceClient(x, y, z));

            StreamingHubClientRegistry<Nekoyume.Shared.Hubs.IActionEvaluationHub, Nekoyume.Shared.Hubs.IActionEvaluationHubReceiver>.Register((a, _, b, c, d, e) => new Nekoyume.Shared.Hubs.ActionEvaluationHubClient(a, b, c, d, e));
        }
    }
}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace MagicOnion.Resolvers
{
    using System;
    using MessagePack;

    public class MagicOnionResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new MagicOnionResolver();

        MagicOnionResolver()
        {

        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.formatter;
        }

        static class FormatterCache<T>
        {
            public static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> formatter;

            static FormatterCache()
            {
                var f = MagicOnionResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class MagicOnionResolverGetFormatterHelper
    {
        static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static MagicOnionResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(1)
            {
                {typeof(global::MagicOnion.DynamicArgumentTuple<byte[], byte[]>), 0 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MagicOnion.DynamicArgumentTupleFormatter<byte[], byte[]>(default(byte[]), default(byte[]));
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace Nekoyume.Shared.Services {
    using System;
    using MagicOnion;
    using MagicOnion.Client;
    using Grpc.Core;
    using MessagePack;

    [Ignore]
    public class BlockChainServiceClient : MagicOnionClientBase<global::Nekoyume.Shared.Services.IBlockChainService>, global::Nekoyume.Shared.Services.IBlockChainService
    {
        static readonly Method<byte[], byte[]> PutTransactionMethod;
        static readonly Func<RequestContext, ResponseContext> PutTransactionDelegate;
        static readonly Method<byte[], byte[]> GetNextTxNonceMethod;
        static readonly Func<RequestContext, ResponseContext> GetNextTxNonceDelegate;
        static readonly Method<byte[], byte[]> GetStateMethod;
        static readonly Func<RequestContext, ResponseContext> GetStateDelegate;
        static readonly Method<byte[], byte[]> GetBalanceMethod;
        static readonly Func<RequestContext, ResponseContext> GetBalanceDelegate;

        static BlockChainServiceClient()
        {
            PutTransactionMethod = new Method<byte[], byte[]>(MethodType.Unary, "IBlockChainService", "PutTransaction", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);
            PutTransactionDelegate = _PutTransaction;
            GetNextTxNonceMethod = new Method<byte[], byte[]>(MethodType.Unary, "IBlockChainService", "GetNextTxNonce", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);
            GetNextTxNonceDelegate = _GetNextTxNonce;
            GetStateMethod = new Method<byte[], byte[]>(MethodType.Unary, "IBlockChainService", "GetState", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);
            GetStateDelegate = _GetState;
            GetBalanceMethod = new Method<byte[], byte[]>(MethodType.Unary, "IBlockChainService", "GetBalance", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);
            GetBalanceDelegate = _GetBalance;
        }

        BlockChainServiceClient()
        {
        }

        public BlockChainServiceClient(CallInvoker callInvoker, MessagePackSerializerOptions serializerOptions, IClientFilter[] filters)
            : base(callInvoker, serializerOptions, filters)
        {
        }

        protected override MagicOnionClientBase<IBlockChainService> Clone()
        {
            var clone = new BlockChainServiceClient();
            clone.host = this.host;
            clone.option = this.option;
            clone.callInvoker = this.callInvoker;
            clone.serializerOptions = this.serializerOptions;
            clone.filters = filters;
            return clone;
        }

        public new IBlockChainService WithHeaders(Metadata headers)
        {
            return base.WithHeaders(headers);
        }

        public new IBlockChainService WithCancellationToken(System.Threading.CancellationToken cancellationToken)
        {
            return base.WithCancellationToken(cancellationToken);
        }

        public new IBlockChainService WithDeadline(System.DateTime deadline)
        {
            return base.WithDeadline(deadline);
        }

        public new IBlockChainService WithHost(string host)
        {
            return base.WithHost(host);
        }

        public new IBlockChainService WithOptions(CallOptions option)
        {
            return base.WithOptions(option);
        }
   
        static ResponseContext _PutTransaction(RequestContext __context)
        {
            return CreateResponseContext<byte[], bool>(__context, PutTransactionMethod);
        }

        public global::MagicOnion.UnaryResult<bool> PutTransaction(byte[] txBytes)
        {
            return InvokeAsync<byte[], bool>("IBlockChainService/PutTransaction", txBytes, PutTransactionDelegate);
        }
        static ResponseContext _GetNextTxNonce(RequestContext __context)
        {
            return CreateResponseContext<byte[], long>(__context, GetNextTxNonceMethod);
        }

        public global::MagicOnion.UnaryResult<long> GetNextTxNonce(byte[] addressBytes)
        {
            return InvokeAsync<byte[], long>("IBlockChainService/GetNextTxNonce", addressBytes, GetNextTxNonceDelegate);
        }
        static ResponseContext _GetState(RequestContext __context)
        {
            return CreateResponseContext<byte[], byte[]>(__context, GetStateMethod);
        }

        public global::MagicOnion.UnaryResult<byte[]> GetState(byte[] addressBytes)
        {
            return InvokeAsync<byte[], byte[]>("IBlockChainService/GetState", addressBytes, GetStateDelegate);
        }
        static ResponseContext _GetBalance(RequestContext __context)
        {
            return CreateResponseContext<DynamicArgumentTuple<byte[], byte[]>, byte[]>(__context, GetBalanceMethod);
        }

        public global::MagicOnion.UnaryResult<byte[]> GetBalance(byte[] addressBytes, byte[] currencyBytes)
        {
            return InvokeAsync<DynamicArgumentTuple<byte[], byte[]>, byte[]>("IBlockChainService/GetBalance", new DynamicArgumentTuple<byte[], byte[]>(addressBytes, currencyBytes), GetBalanceDelegate);
        }
    }
}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

namespace Nekoyume.Shared.Hubs {
    using Grpc.Core;
    using Grpc.Core.Logging;
    using MagicOnion;
    using MagicOnion.Client;
    using MessagePack;
    using System;
    using System.Threading.Tasks;

    [Ignore]
    public class ActionEvaluationHubClient : StreamingHubClientBase<global::Nekoyume.Shared.Hubs.IActionEvaluationHub, global::Nekoyume.Shared.Hubs.IActionEvaluationHubReceiver>, global::Nekoyume.Shared.Hubs.IActionEvaluationHub
    {
        static readonly Method<byte[], byte[]> method = new Method<byte[], byte[]>(MethodType.DuplexStreaming, "IActionEvaluationHub", "Connect", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);

        protected override Method<byte[], byte[]> DuplexStreamingAsyncMethod { get { return method; } }

        readonly global::Nekoyume.Shared.Hubs.IActionEvaluationHub __fireAndForgetClient;

        public ActionEvaluationHubClient(CallInvoker callInvoker, string host, CallOptions option, MessagePackSerializerOptions serializerOptions, ILogger logger)
            : base(callInvoker, host, option, serializerOptions, logger)
        {
            this.__fireAndForgetClient = new FireAndForgetClient(this);
        }
        
        public global::Nekoyume.Shared.Hubs.IActionEvaluationHub FireAndForget()
        {
            return __fireAndForgetClient;
        }

        protected override void OnBroadcastEvent(int methodId, ArraySegment<byte> data)
        {
            switch (methodId)
            {
                case 1092973952: // OnRender
                {
                    var result = MessagePackSerializer.Deserialize<byte[]>(data, serializerOptions);
                    receiver.OnRender(result); break;
                }
                case -204847325: // OnTipChanged
                {
                    var result = MessagePackSerializer.Deserialize<long>(data, serializerOptions);
                    receiver.OnTipChanged(result); break;
                }
                default:
                    break;
            }
        }

        protected override void OnResponseEvent(int methodId, object taskCompletionSource, ArraySegment<byte> data)
        {
            switch (methodId)
            {
                case -733403293: // JoinAsync
                {
                    var result = MessagePackSerializer.Deserialize<Nil>(data, serializerOptions);
                    ((TaskCompletionSource<Nil>)taskCompletionSource).TrySetResult(result);
                    break;
                }
                case 1368362116: // LeaveAsync
                {
                    var result = MessagePackSerializer.Deserialize<Nil>(data, serializerOptions);
                    ((TaskCompletionSource<Nil>)taskCompletionSource).TrySetResult(result);
                    break;
                }
                case -742654392: // BroadcastAsync
                {
                    var result = MessagePackSerializer.Deserialize<Nil>(data, serializerOptions);
                    ((TaskCompletionSource<Nil>)taskCompletionSource).TrySetResult(result);
                    break;
                }
                case 553963035: // UpdateTipAsync
                {
                    var result = MessagePackSerializer.Deserialize<Nil>(data, serializerOptions);
                    ((TaskCompletionSource<Nil>)taskCompletionSource).TrySetResult(result);
                    break;
                }
                default:
                    break;
            }
        }
   
        public global::System.Threading.Tasks.Task JoinAsync()
        {
            return WriteMessageWithResponseAsync<Nil, Nil>(-733403293, Nil.Default);
        }

        public global::System.Threading.Tasks.Task LeaveAsync()
        {
            return WriteMessageWithResponseAsync<Nil, Nil>(1368362116, Nil.Default);
        }

        public global::System.Threading.Tasks.Task BroadcastAsync(byte[] encoded)
        {
            return WriteMessageWithResponseAsync<byte[], Nil>(-742654392, encoded);
        }

        public global::System.Threading.Tasks.Task UpdateTipAsync(long index)
        {
            return WriteMessageWithResponseAsync<long, Nil>(553963035, index);
        }


        class FireAndForgetClient : global::Nekoyume.Shared.Hubs.IActionEvaluationHub
        {
            readonly ActionEvaluationHubClient __parent;

            public FireAndForgetClient(ActionEvaluationHubClient parentClient)
            {
                this.__parent = parentClient;
            }

            public global::Nekoyume.Shared.Hubs.IActionEvaluationHub FireAndForget()
            {
                throw new NotSupportedException();
            }

            public Task DisposeAsync()
            {
                throw new NotSupportedException();
            }

            public Task WaitForDisconnect()
            {
                throw new NotSupportedException();
            }

            public global::System.Threading.Tasks.Task JoinAsync()
            {
                return __parent.WriteMessageAsync<Nil>(-733403293, Nil.Default);
            }

            public global::System.Threading.Tasks.Task LeaveAsync()
            {
                return __parent.WriteMessageAsync<Nil>(1368362116, Nil.Default);
            }

            public global::System.Threading.Tasks.Task BroadcastAsync(byte[] encoded)
            {
                return __parent.WriteMessageAsync<byte[]>(-742654392, encoded);
            }

            public global::System.Threading.Tasks.Task UpdateTipAsync(long index)
            {
                return __parent.WriteMessageAsync<long>(553963035, index);
            }

        }
    }
}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
