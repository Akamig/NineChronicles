version: 2.1
orbs:
  azure-acr: circleci/azure-acr@0.1.2
  azure-aks: circleci/azure-aks@0.2.0
  azure-cli: circleci/azure-cli@1.1.0
  kubernetes: circleci/kubernetes@0.3.0

executors:
  default:
    machine:
      docker_layer_caching: true

jobs:
  collect-test-result:
    executor: azure-acr/default
    parameters:
      docker-image-name:
        description: The Docker image which contains test results
        type: string
    steps:
      - azure-cli/install

      - azure-cli/login-with-service-principal

      - azure-acr/acr-login:
          registry-name: "planetariumtest"

      - run:
          name: collect-test-result
          command: |
            mkdir -p /tmp/test-result/
            docker run \
              --entrypoint=/bin/ls \
              "<< parameters.docker-image-name >>" \
              -al /app/
            docker run \
              --entrypoint=/bin/ls \
              "<< parameters.docker-image-name >>" \
              -al /app/test-result/
            docker run \
              --entrypoint=/bin/cat \
              "<< parameters.docker-image-name >>" \
              /app/test-result/result.txt > /tmp/test-result/result.txt
            docker run \
              --entrypoint=/bin/cat \
              "<< parameters.docker-image-name >>" \
              /app/test-result/junit.xml > /tmp/test-result/junit.xml

      - store_test_results:
          path: /tmp/test-result

      - store_artifacts:
          path: /tmp/test-result

      - run:
          name: ensure-tests-pass
          command: '[ "$(cat /tmp/test-result/result.txt)" = "Passed" ]'

  deploy-application:
    executor: azure-aks/default
    parameters:
      cluster-name:
        description: Name of the AKS cluster
        type: string
      docker-image-name:
        description: Name of the docker image to be deployed
        type: string
      version-info:
        description: App version information
        type: string
      resource-group:
        description: Resource group
        type: string
        default: ""
    steps:
      - checkout
      - azure-aks/update-kubeconfig-with-credentials:
          perform-login: true
          install-kubectl: true
          cluster-name: << parameters.cluster-name >>
          resource-group: << parameters.resource-group >>
      - run:
          name: Create deployment & service manifest
          command: |
            CLUSTER_RG=$(az aks show --resource-group << parameters.resource-group >> --name << parameters.cluster-name >> --query nodeResourceGroup -o tsv)
            MINER_IP=$(az network public-ip show --resource-group "$CLUSTER_RG" --name nekoalpha-miner-ip --query ipAddress --output tsv )
            < k8s/nekoalpha/deployment.yaml.template \
            sed "\
            s|DOCKER_IMAGE_NAME|<< parameters.docker-image-name >>|g;\
            s|VERSION_INFO_VALUE|<< parameters.version-info >>|g;\
            s|MINER_IP|$MINER_IP|g;\
            s|NEKOALPHA_PRIVATE_KEY|$NEKOALPHA_PRIVATE_KEY|g" > k8s/nekoalpha/deployment.yaml
            < k8s/nekoalpha/service.yaml.template \
            sed "s|MINER_IP|$MINER_IP|g" > k8s/nekoalpha/service.yaml
      - kubernetes/create-or-update-resource:
          resource-file-path: "k8s/nekoalpha/storageclass.yaml"
      - kubernetes/create-or-update-resource:
          resource-file-path: "k8s/nekoalpha/pvc-role.yaml"
      - kubernetes/create-or-update-resource:
          resource-file-path: "k8s/nekoalpha/pvc.yaml"
      - kubernetes/create-or-update-resource:
          resource-file-path: "k8s/nekoalpha/deployment.yaml"
          get-rollout-status: true
          resource-name: deployment/miner
      - kubernetes/create-or-update-resource:
          resource-file-path: "k8s/nekoalpha/service.yaml"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - azure-acr/build-and-push-image:
          name: build-and-push-image
          tag: "git-$CIRCLE_SHA1"
          login-server-name: "$DOCKER_SERVER"
          registry-name: "planetariumtest"
          repo: $CIRCLE_PROJECT_REPONAME
          extra-build-args: '--build-arg ulf="$ULF"'
          executor: default

      - collect-test-result:
          name: collect-test-result
          docker-image-name: "$DOCKER_SERVER/$CIRCLE_PROJECT_REPONAME:git-$CIRCLE_SHA1"
          requires:
            - build-and-push-image

      - azure-aks/create-cluster:
          name: create-cluster
          node-count: 1
          cluster-name: "nekoyume-alpha"
          resource-group: "nekoyume-alpha"
          requires:
            - build-and-push-image
          filters:
            branches:
              only: master

      - deploy-application:
          cluster-name: "nekoyume-alpha"
          resource-group: "nekoyume-alpha"
          docker-image-name: "$DOCKER_SERVER/$CIRCLE_PROJECT_REPONAME:git-$CIRCLE_SHA1"
          version-info: "$CIRCLE_SHA1"
          requires:
            - create-cluster
